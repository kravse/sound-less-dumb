{"version":3,"sources":["AnimatedTitle.js","App.js","serviceWorker.js","index.js"],"names":["AnimatedTitle","className","React","Component","App","props","buildNewSentence","original","long","a","length","newWords","limit","setState","spinner","error","i","axios","get","headers","Accept","params","key","then","response","data","index","indexOf","meta","syns","sort","b","e","console","log","catch","newSentence","join","state","isStupid","handleSubmit","bind","sentence","createRef","event","preventDefault","this","current","value","split","longWords","filter","val","onSubmit","class","autoComplete","placeholder","maxLength","type","name","ref","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mWAqBeA,G,uLAhBX,OACE,wBAAIC,UAAU,kBACZ,6BACE,0BAAMA,UAAU,YAAhB,SACA,0BAAMA,UAAU,aAAhB,WAEF,yBAAKA,UAAU,QAAf,QACA,6BACE,0BAAMA,UAAU,YAAhB,QACA,0BAAMA,UAAU,aAAhB,e,GAXkBC,IAAMC,YCiGnBC,G,kBA7Fb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAURC,iBAXmB,uCAWA,WAAOC,EAAUC,GAAjB,qBAAAC,EAAA,yDACG,IAAhBD,EAAKE,OADQ,yCACa,IADb,OAEbC,EAAWJ,EACXK,EAAQJ,EAAKE,OAAS,EAAIF,EAAKE,OAAS,EAC5C,EAAKG,SAAS,CACZC,SAAS,EACTC,MAAO,KANQ,IAAAN,EAAA,iBAQRO,GARQ,SAAAP,EAAA,sEASTQ,IAAMC,IAAI,kEAAoEV,EAAKQ,GAAI,CAC3FG,QAAS,CACPC,OAAQ,oBAEVC,OAAQ,CACNC,IAAK,0CAENC,MAAK,SAACC,GACP,IACE,GAAIA,EAASC,MAAQD,EAASC,KAAKf,OAAS,EAAG,CAC7C,IAAIgB,EAAQf,EAASgB,QAAQnB,EAAKQ,IAClCL,EAASe,GAASF,EAASC,KAAK,GAAGG,KAAKC,KAAK,GAAGC,MAAK,SAAUrB,EAAGsB,GAAK,OAAOA,EAAErB,OAASD,EAAEC,UAAW,IAExG,MAAOsB,GAAKC,QAAQC,IAAI,mBACzBC,OAAM,SAACpB,GACR,EAAKF,SAAS,CAACE,MAAO,0GAxBT,0CAQRC,EAAI,EARI,YAQDA,EAAIJ,GARH,0CAQRI,GARQ,eAQUA,IARV,uBA2BjB,EAAKH,SAAS,CACZuB,YAAazB,EAAS0B,KAAK,KAC3BvB,SAAS,IA7BM,4CAXA,wDAEjB,EAAKwB,MAAQ,CACXC,UAAU,EACVzB,SAAS,EACTC,MAAO,IAET,EAAKyB,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,SAAWxC,IAAMyC,YARL,E,0EA4CNC,GAGX,GAFAA,EAAMC,iBACNC,KAAKjC,SAAS,CAACuB,YAAa,KACxBU,KAAKR,MAAMC,SACbO,KAAKjC,SAAS,CAAC0B,UAAU,QAD3B,CAIA,IAAIG,EAAWI,KAAKJ,SAASK,QAAQC,MAAMC,MAAM,KAC7CC,EAAYR,EAASS,QAAO,SAAAC,GAC9B,OAAOA,EAAI1C,OAAS,KAEG,IAArBwC,EAAUxC,OACZoC,KAAKjC,SAAS,CAAC0B,UAAU,IAEzBO,KAAKxC,iBAAiBoC,EAAUQ,M,+BAKlC,OACE,yBAAKjD,UAAU,OACb,yBAAKA,UAAU,WACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,OAEF,yBAAKA,UAAU,OACb,0BAAMoD,SAAUP,KAAKN,cACnB,iFACCM,KAAKR,MAAMvB,OAAS,uBAAGuC,MAAM,SAASR,KAAKR,MAAMvB,OAClD,2BACEwC,aAAa,MACbtD,UAAW6C,KAAKR,MAAMxB,QAAU,OAAS,GACzC0C,YAAY,wBACZC,UAAU,MACVC,KAAK,OACLC,KAAK,WACLC,IAAKd,KAAKJ,aAGhB,yBAAKzC,UAAU,UACZ6C,KAAKR,MAAMF,aAAgB,6BAAK,sEAA+C,+BAAKU,KAAKR,MAAMF,YAAhB,MAC/EU,KAAKR,MAAMC,SAAW,uDAAkC,4C,GAtFnDrC,IAAMC,YCMJ0D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjD,MAAK,SAAAkD,GACjCA,EAAaC,kB","file":"static/js/main.53ea66a5.chunk.js","sourcesContent":["import React from 'react';\nimport './AnimatedTitle.css';\n\nclass AnimatedTitle extends React.Component {\n  render() {\n    return (\n      <h1 className=\"animated-title\">\n        <div>\n          <span className=\"original\">Sound</span>\n          <span className=\"less-dumb\">Appear</span>\n        </div>\n        <div className=\"less\">Less</div>\n        <div>\n          <span className=\"original\">Dumb</span>\n          <span className=\"less-dumb\">Dopey</span>\n        </div>\n      </h1>\n    )\n  }\n}\n\nexport default AnimatedTitle;\n","import React from 'react';\n// import logo from './logo.svg';\nimport axios from 'axios'\nimport AnimatedTitle from './AnimatedTitle'\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isStupid: false,\n      spinner: false,\n      error: ''\n    }\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.sentence = React.createRef();\n  }\n\n  buildNewSentence = async (original, long) => {\n    if (long.length === 0) return ''\n    let newWords = original\n    let limit = long.length < 6 ? long.length : 3\n    this.setState({\n      spinner: true,\n      error: ''\n    })\n    for (let i = 0; i < limit; i++) {\n      await axios.get('https://www.dictionaryapi.com/api/v3/references/thesaurus/json/' + long[i], {\n        headers: {\n          Accept: \"application/json\"\n        },\n        params: {\n          key: 'fca6f403-e9b1-442c-82b0-f861e7b7a3d2'\n        }\n      }).then((response) => {\n        try {\n          if (response.data && response.data.length > 0) {\n            let index = newWords.indexOf(long[i])\n            newWords[index] = response.data[0].meta.syns[0].sort(function (a, b) { return b.length - a.length; })[0]\n          }\n        } catch (e) { console.log('weird words') }\n      }).catch((error) => {\n        this.setState({error: 'â˜¢ Hahaha looks like we might have been rate limited by Merriam Webster... Come back tomorrow!'});\n      })\n    }\n    this.setState({\n      newSentence: newWords.join(' '),\n      spinner: false\n    })\n  }\n\n  handleSubmit(event) {\n    event.preventDefault()\n    this.setState({newSentence: ''})\n    if (this.state.isStupid) {\n      this.setState({isStupid: false})\n      return\n    }\n    let sentence = this.sentence.current.value.split(\" \")\n    let longWords = sentence.filter(val => {\n      return val.length > 3\n    })\n    if (longWords.length === 0) {\n      this.setState({isStupid: true})\n    } else {\n      this.buildNewSentence(sentence, longWords)\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"content\">\n          <header className=\"App-header\">\n            <AnimatedTitle></AnimatedTitle>\n          </header>\n          <div className=\"box\">\n            <form onSubmit={this.handleSubmit}>\n              <p>Enter a sentence to make it sound more impressive.</p>\n              {this.state.error && <p class=\"error\">{this.state.error}</p>}\n              <input\n                autoComplete=\"off\"\n                className={this.state.spinner ? 'spin' : ''}\n                placeholder=\"Why am I so lonely...\"\n                maxLength=\"100\"\n                type=\"text\"\n                name=\"sentence\"\n                ref={this.sentence}/>\n            </form>\n          </div>\n          <div className=\"result\">\n            {this.state.newSentence && (<div><h4>Why don't you try saying this instead:</h4><p>\"{this.state.newSentence}\"</p></div>)}\n            {this.state.isStupid ? <p>Use longer words stupid.</p> : <></>}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}